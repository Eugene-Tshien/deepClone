[
  {
    "prompt": "How many singers do we have? database is concert_singer. tables are stadium, singer, concert, singer in concert. columns in stadium are stadium id, location, name, capacity, highest, lowest, average. columns in singer are singer id, name, country, song name, song release year, age, is male. columns in concert are concert id, concert name, theme, stadium id, year. columns in singer in concert are concert id, singer id.",
    "target": "SELECT count(*) FROM singer"
  },
  {
    "prompt": "What is the total number of singers? database is concert_singer. tables are stadium, singer, concert, singer in concert. columns in stadium are stadium id, location, name, capacity, highest, lowest, average. columns in singer are singer id, name, country, song name, song release year, age, is male. columns in concert are concert id, concert name, theme, stadium id, year. columns in singer in concert are concert id, singer id.",
    "target": "SELECT count(*) FROM singer"
  },
  {
    "prompt": "What are all distinct countries where singers above age 20 are from? database is concert_singer. tables are stadium, singer, concert, singer in concert. columns in stadium are stadium id, location, name, capacity, highest, lowest, average. columns in singer are singer id, name, country, song name, song release year, age, is male. columns in concert are concert id, concert name, theme, stadium id, year. columns in singer in concert are concert id, singer id.",
    "target": "SELECT DISTINCT country FROM singer WHERE age  >  20"
  },
  {
    "prompt": "What are  the different countries with singers above age 20? database is concert_singer. tables are stadium, singer, concert, singer in concert. columns in stadium are stadium id, location, name, capacity, highest, lowest, average. columns in singer are singer id, name, country, song name, song release year, age, is male. columns in concert are concert id, concert name, theme, stadium id, year. columns in singer in concert are concert id, singer id.",
    "target": "SELECT DISTINCT country FROM singer WHERE age  >  20"
  },
  {
    "prompt": "Find the number of pets whose weight is heavier than 10. database is pets_1. tables are student, has pet, pets. columns in student are student id, last name, first name, age, sex, major, advisor, city code. columns in has pet are student id, pet id. columns in pets are pet id, pet type, pet age, weight.",
    "target": "SELECT count(*) FROM pets WHERE weight  >  10"
  },
  {
    "prompt": "How many pets have a greater weight than 10? database is pets_1. tables are student, has pet, pets. columns in student are student id, last name, first name, age, sex, major, advisor, city code. columns in has pet are student id, pet id. columns in pets are pet id, pet type, pet age, weight.",
    "target": "SELECT count(*) FROM pets WHERE weight  >  10"
  },
  {
    "prompt": "Find the weight of the youngest dog. database is pets_1. tables are student, has pet, pets. columns in student are student id, last name, first name, age, sex, major, advisor, city code. columns in has pet are student id, pet id. columns in pets are pet id, pet type, pet age, weight.",
    "target": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"
  },
  {
    "prompt": "How much does the youngest dog weigh? database is pets_1. tables are student, has pet, pets. columns in student are student id, last name, first name, age, sex, major, advisor, city code. columns in has pet are student id, pet id. columns in pets are pet id, pet type, pet age, weight.",
    "target": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1"
  },
  {
    "prompt": "Find the number of distinct type of pets. database is pets_1. tables are student, has pet, pets. columns in student are student id, last name, first name, age, sex, major, advisor, city code. columns in has pet are student id, pet id. columns in pets are pet id, pet type, pet age, weight.",
    "target": "SELECT count(DISTINCT pettype) FROM pets"
  },
  {
    "prompt": "How many different types of pet are there? database is pets_1. tables are student, has pet, pets. columns in student are student id, last name, first name, age, sex, major, advisor, city code. columns in has pet are student id, pet id. columns in pets are pet id, pet type, pet age, weight.",
    "target": "SELECT count(DISTINCT pettype) FROM pets"
  },
  {
    "prompt": "How many continents are there? database is car_1. tables are continents, countries, car makers, model list, car names, cars data. columns in continents are cont id, continent. columns in countries are country id, country name, continent. columns in car makers are id, maker, full name, country. columns in model list are model id, maker, model. columns in car names are make id, model, make. columns in cars data are id, mpg, cylinders, edispl, horsepower, weight, accelerate, year.",
    "target": "SELECT count(*) FROM CONTINENTS;"
  },
  {
    "prompt": "What is the number of continents? database is car_1. tables are continents, countries, car makers, model list, car names, cars data. columns in continents are cont id, continent. columns in countries are country id, country name, continent. columns in car makers are id, maker, full name, country. columns in model list are model id, maker, model. columns in car names are make id, model, make. columns in cars data are id, mpg, cylinders, edispl, horsepower, weight, accelerate, year.",
    "target": "SELECT count(*) FROM CONTINENTS;"
  },
  {
    "prompt": "How many countries are listed? database is car_1. tables are continents, countries, car makers, model list, car names, cars data. columns in continents are cont id, continent. columns in countries are country id, country name, continent. columns in car makers are id, maker, full name, country. columns in model list are model id, maker, model. columns in car names are make id, model, make. columns in cars data are id, mpg, cylinders, edispl, horsepower, weight, accelerate, year.",
    "target": "SELECT count(*) FROM COUNTRIES;"
  },
  {
    "prompt": "How many countries exist? database is car_1. tables are continents, countries, car makers, model list, car names, cars data. columns in continents are cont id, continent. columns in countries are country id, country name, continent. columns in car makers are id, maker, full name, country. columns in model list are model id, maker, model. columns in car names are make id, model, make. columns in cars data are id, mpg, cylinders, edispl, horsepower, weight, accelerate, year.",
    "target": "SELECT count(*) FROM COUNTRIES;"
  },
  {
    "prompt": "What is the average miles per gallon(mpg) of the cars with 4 cylinders? database is car_1. tables are continents, countries, car makers, model list, car names, cars data. columns in continents are cont id, continent. columns in countries are country id, country name, continent. columns in car makers are id, maker, full name, country. columns in model list are model id, maker, model. columns in car names are make id, model, make. columns in cars data are id, mpg, cylinders, edispl, horsepower, weight, accelerate, year.",
    "target": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;"
  },
  {
    "prompt": "What is the average miles per gallon of all the cards with 4 cylinders? database is car_1. tables are continents, countries, car makers, model list, car names, cars data. columns in continents are cont id, continent. columns in countries are country id, country name, continent. columns in car makers are id, maker, full name, country. columns in model list are model id, maker, model. columns in car names are make id, model, make. columns in cars data are id, mpg, cylinders, edispl, horsepower, weight, accelerate, year.",
    "target": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;"
  },
  {
    "prompt": "What is the number of the cars with horsepower more than 150? database is car_1. tables are continents, countries, car makers, model list, car names, cars data. columns in continents are cont id, continent. columns in countries are country id, country name, continent. columns in car makers are id, maker, full name, country. columns in model list are model id, maker, model. columns in car names are make id, model, make. columns in cars data are id, mpg, cylinders, edispl, horsepower, weight, accelerate, year.",
    "target": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;"
  },
  {
    "prompt": "What is the number of cars with a horsepower greater than 150? database is car_1. tables are continents, countries, car makers, model list, car names, cars data. columns in continents are cont id, continent. columns in countries are country id, country name, continent. columns in car makers are id, maker, full name, country. columns in model list are model id, maker, model. columns in car names are make id, model, make. columns in cars data are id, mpg, cylinders, edispl, horsepower, weight, accelerate, year.",
    "target": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;"
  },
  {
    "prompt": "What is the average horsepower of the cars before 1980? database is car_1. tables are continents, countries, car makers, model list, car names, cars data. columns in continents are cont id, continent. columns in countries are country id, country name, continent. columns in car makers are id, maker, full name, country. columns in model list are model id, maker, model. columns in car names are make id, model, make. columns in cars data are id, mpg, cylinders, edispl, horsepower, weight, accelerate, year.",
    "target": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;"
  },
  {
    "prompt": "What is the average horsepower for all cars produced before 1980 ? database is car_1. tables are continents, countries, car makers, model list, car names, cars data. columns in continents are cont id, continent. columns in countries are country id, country name, continent. columns in car makers are id, maker, full name, country. columns in model list are model id, maker, model. columns in car names are make id, model, make. columns in cars data are id, mpg, cylinders, edispl, horsepower, weight, accelerate, year.",
    "target": "select avg(horsepower) from cars_data where year  <  1980;"
  },
  {
    "prompt": "How many cars have more than 4 cylinders? database is car_1. tables are continents, countries, car makers, model list, car names, cars data. columns in continents are cont id, continent. columns in countries are country id, country name, continent. columns in car makers are id, maker, full name, country. columns in model list are model id, maker, model. columns in car names are make id, model, make. columns in cars data are id, mpg, cylinders, edispl, horsepower, weight, accelerate, year.",
    "target": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;"
  },
  {
    "prompt": "What is the number of cars with more than 4 cylinders? database is car_1. tables are continents, countries, car makers, model list, car names, cars data. columns in continents are cont id, continent. columns in countries are country id, country name, continent. columns in car makers are id, maker, full name, country. columns in model list are model id, maker, model. columns in car names are make id, model, make. columns in cars data are id, mpg, cylinders, edispl, horsepower, weight, accelerate, year.",
    "target": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;"
  },
  {
    "prompt": "how many cars were produced in 1980? database is car_1. tables are continents, countries, car makers, model list, car names, cars data. columns in continents are cont id, continent. columns in countries are country id, country name, continent. columns in car makers are id, maker, full name, country. columns in model list are model id, maker, model. columns in car names are make id, model, make. columns in cars data are id, mpg, cylinders, edispl, horsepower, weight, accelerate, year.",
    "target": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;"
  },
  {
    "prompt": "In 1980, how many cars were made? database is car_1. tables are continents, countries, car makers, model list, car names, cars data. columns in continents are cont id, continent. columns in countries are country id, country name, continent. columns in car makers are id, maker, full name, country. columns in model list are model id, maker, model. columns in car names are make id, model, make. columns in cars data are id, mpg, cylinders, edispl, horsepower, weight, accelerate, year.",
    "target": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;"
  },
  {
    "prompt": "How many cars has over 6 cylinders? database is car_1. tables are continents, countries, car makers, model list, car names, cars data. columns in continents are cont id, continent. columns in countries are country id, country name, continent. columns in car makers are id, maker, full name, country. columns in model list are model id, maker, model. columns in car names are make id, model, make. columns in cars data are id, mpg, cylinders, edispl, horsepower, weight, accelerate, year.",
    "target": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;"
  },
  {
    "prompt": "What is the number of carsw ith over 6 cylinders? database is car_1. tables are continents, countries, car makers, model list, car names, cars data. columns in continents are cont id, continent. columns in countries are country id, country name, continent. columns in car makers are id, maker, full name, country. columns in model list are model id, maker, model. columns in car names are make id, model, make. columns in cars data are id, mpg, cylinders, edispl, horsepower, weight, accelerate, year.",
    "target": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;"
  },
  {
    "prompt": "Which country does Airline \"JetBlue Airways\" belong to? database is flight_2. tables are airlines, airports, flights. columns in airlines are airline id, airline name, abbreviation, country. columns in airports are city, airport code, airport name, country, country abbrev. columns in flights are airline, flight number, source airport, destination airport.",
    "target": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""
  },
  {
    "prompt": "What country is Jetblue Airways affiliated with? database is flight_2. tables are airlines, airports, flights. columns in airlines are airline id, airline name, abbreviation, country. columns in airports are city, airport code, airport name, country, country abbrev. columns in flights are airline, flight number, source airport, destination airport.",
    "target": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""
  },
  {
    "prompt": "What is the abbreviation of Airline \"JetBlue Airways\"? database is flight_2. tables are airlines, airports, flights. columns in airlines are airline id, airline name, abbreviation, country. columns in airports are city, airport code, airport name, country, country abbrev. columns in flights are airline, flight number, source airport, destination airport.",
    "target": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""
  },
  {
    "prompt": "Which abbreviation corresponds to Jetblue Airways? database is flight_2. tables are airlines, airports, flights. columns in airlines are airline id, airline name, abbreviation, country. columns in airports are city, airport code, airport name, country, country abbrev. columns in flights are airline, flight number, source airport, destination airport.",
    "target": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""
  },
  {
    "prompt": "How many airlines do we have? database is flight_2. tables are airlines, airports, flights. columns in airlines are airline id, airline name, abbreviation, country. columns in airports are city, airport code, airport name, country, country abbrev. columns in flights are airline, flight number, source airport, destination airport.",
    "target": "SELECT count(*) FROM AIRLINES"
  },
  {
    "prompt": "What is the total number of airlines? database is flight_2. tables are airlines, airports, flights. columns in airlines are airline id, airline name, abbreviation, country. columns in airports are city, airport code, airport name, country, country abbrev. columns in flights are airline, flight number, source airport, destination airport.",
    "target": "SELECT count(*) FROM AIRLINES"
  },
  {
    "prompt": "How many airports do we have? database is flight_2. tables are airlines, airports, flights. columns in airlines are airline id, airline name, abbreviation, country. columns in airports are city, airport code, airport name, country, country abbrev. columns in flights are airline, flight number, source airport, destination airport.",
    "target": "SELECT count(*) FROM AIRPORTS"
  },
  {
    "prompt": "Return the number of  airports. database is flight_2. tables are airlines, airports, flights. columns in airlines are airline id, airline name, abbreviation, country. columns in airports are city, airport code, airport name, country, country abbrev. columns in flights are airline, flight number, source airport, destination airport.",
    "target": "SELECT count(*) FROM AIRPORTS"
  },
  {
    "prompt": "How many flights do we have? database is flight_2. tables are airlines, airports, flights. columns in airlines are airline id, airline name, abbreviation, country. columns in airports are city, airport code, airport name, country, country abbrev. columns in flights are airline, flight number, source airport, destination airport.",
    "target": "SELECT count(*) FROM FLIGHTS"
  },
  {
    "prompt": "Return the number of flights. database is flight_2. tables are airlines, airports, flights. columns in airlines are airline id, airline name, abbreviation, country. columns in airports are city, airport code, airport name, country, country abbrev. columns in flights are airline, flight number, source airport, destination airport.",
    "target": "SELECT count(*) FROM FLIGHTS"
  },
  {
    "prompt": "Which airline has abbreviation UAL? database is flight_2. tables are airlines, airports, flights. columns in airlines are airline id, airline name, abbreviation, country. columns in airports are city, airport code, airport name, country, country abbrev. columns in flights are airline, flight number, source airport, destination airport.",
    "target": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""
  },
  {
    "prompt": "Give the airline with abbreviation UAL. database is flight_2. tables are airlines, airports, flights. columns in airlines are airline id, airline name, abbreviation, country. columns in airports are city, airport code, airport name, country, country abbrev. columns in flights are airline, flight number, source airport, destination airport.",
    "target": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""
  },
  {
    "prompt": "How many airlines are from USA? database is flight_2. tables are airlines, airports, flights. columns in airlines are airline id, airline name, abbreviation, country. columns in airports are city, airport code, airport name, country, country abbrev. columns in flights are airline, flight number, source airport, destination airport.",
    "target": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""
  },
  {
    "prompt": "Return the number of airlines in the USA. database is flight_2. tables are airlines, airports, flights. columns in airlines are airline id, airline name, abbreviation, country. columns in airports are city, airport code, airport name, country, country abbrev. columns in flights are airline, flight number, source airport, destination airport.",
    "target": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""
  },
  {
    "prompt": "What is the airport name for airport AKO? database is flight_2. tables are airlines, airports, flights. columns in airlines are airline id, airline name, abbreviation, country. columns in airports are city, airport code, airport name, country, country abbrev. columns in flights are airline, flight number, source airport, destination airport.",
    "target": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""
  },
  {
    "prompt": "Return the name of the airport with code AKO. database is flight_2. tables are airlines, airports, flights. columns in airlines are airline id, airline name, abbreviation, country. columns in airports are city, airport code, airport name, country, country abbrev. columns in flights are airline, flight number, source airport, destination airport.",
    "target": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""
  },
  {
    "prompt": "What are airport names at City Aberdeen? database is flight_2. tables are airlines, airports, flights. columns in airlines are airline id, airline name, abbreviation, country. columns in airports are city, airport code, airport name, country, country abbrev. columns in flights are airline, flight number, source airport, destination airport.",
    "target": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""
  },
  {
    "prompt": "What are the names of airports in Aberdeen? database is flight_2. tables are airlines, airports, flights. columns in airlines are airline id, airline name, abbreviation, country. columns in airports are city, airport code, airport name, country, country abbrev. columns in flights are airline, flight number, source airport, destination airport.",
    "target": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""
  },
  {
    "prompt": "How many flights depart from APG? database is flight_2. tables are airlines, airports, flights. columns in airlines are airline id, airline name, abbreviation, country. columns in airports are city, airport code, airport name, country, country abbrev. columns in flights are airline, flight number, source airport, destination airport.",
    "target": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""
  },
  {
    "prompt": "Count the number of flights departing from APG. database is flight_2. tables are airlines, airports, flights. columns in airlines are airline id, airline name, abbreviation, country. columns in airports are city, airport code, airport name, country, country abbrev. columns in flights are airline, flight number, source airport, destination airport.",
    "target": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""
  },
  {
    "prompt": "How many flights have destination ATO? database is flight_2. tables are airlines, airports, flights. columns in airlines are airline id, airline name, abbreviation, country. columns in airports are city, airport code, airport name, country, country abbrev. columns in flights are airline, flight number, source airport, destination airport.",
    "target": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""
  },
  {
    "prompt": "Count the number of flights into ATO. database is flight_2. tables are airlines, airports, flights. columns in airlines are airline id, airline name, abbreviation, country. columns in airports are city, airport code, airport name, country, country abbrev. columns in flights are airline, flight number, source airport, destination airport.",
    "target": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""
  },
  {
    "prompt": "What are flight numbers of flights departing from Airport \"APG\"? database is flight_2. tables are airlines, airports, flights. columns in airlines are airline id, airline name, abbreviation, country. columns in airports are city, airport code, airport name, country, country abbrev. columns in flights are airline, flight number, source airport, destination airport.",
    "target": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""
  },
  {
    "prompt": "Give the flight numbers of flights leaving from APG. database is flight_2. tables are airlines, airports, flights. columns in airlines are airline id, airline name, abbreviation, country. columns in airports are city, airport code, airport name, country, country abbrev. columns in flights are airline, flight number, source airport, destination airport.",
    "target": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""
  },
  {
    "prompt": "What are flight numbers of flights arriving at Airport \"APG\"? database is flight_2. tables are airlines, airports, flights. columns in airlines are airline id, airline name, abbreviation, country. columns in airports are city, airport code, airport name, country, country abbrev. columns in flights are airline, flight number, source airport, destination airport.",
    "target": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""
  },
  {
    "prompt": "Give the flight numbers of flights landing at APG. database is flight_2. tables are airlines, airports, flights. columns in airlines are airline id, airline name, abbreviation, country. columns in airports are city, airport code, airport name, country, country abbrev. columns in flights are airline, flight number, source airport, destination airport.",
    "target": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""
  },
  {
    "prompt": "How many employees are there? database is employee_hire_evaluation. tables are employee, shop, hiring, evaluation. columns in employee are employee id, name, age, city. columns in shop are shop id, name, location, district, number products, manager name. columns in hiring are shop id, employee id, start from, is full time. columns in evaluation are employee id, year awarded, bonus.",
    "target": "SELECT count(*) FROM employee"
  },
  {
    "prompt": "Count the number of employees database is employee_hire_evaluation. tables are employee, shop, hiring, evaluation. columns in employee are employee id, name, age, city. columns in shop are shop id, name, location, district, number products, manager name. columns in hiring are shop id, employee id, start from, is full time. columns in evaluation are employee id, year awarded, bonus.",
    "target": "SELECT count(*) FROM employee"
  },
  {
    "prompt": "Sort employee names by their age in ascending order. database is employee_hire_evaluation. tables are employee, shop, hiring, evaluation. columns in employee are employee id, name, age, city. columns in shop are shop id, name, location, district, number products, manager name. columns in hiring are shop id, employee id, start from, is full time. columns in evaluation are employee id, year awarded, bonus.",
    "target": "SELECT name FROM employee ORDER BY age"
  },
  {
    "prompt": "List the names of employees and sort in ascending order of age. database is employee_hire_evaluation. tables are employee, shop, hiring, evaluation. columns in employee are employee id, name, age, city. columns in shop are shop id, name, location, district, number products, manager name. columns in hiring are shop id, employee id, start from, is full time. columns in evaluation are employee id, year awarded, bonus.",
    "target": "SELECT name FROM employee ORDER BY age"
  },
  {
    "prompt": "Which cities do more than one employee under age 30 come from? database is employee_hire_evaluation. tables are employee, shop, hiring, evaluation. columns in employee are employee id, name, age, city. columns in shop are shop id, name, location, district, number products, manager name. columns in hiring are shop id, employee id, start from, is full time. columns in evaluation are employee id, year awarded, bonus.",
    "target": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1"
  },
  {
    "prompt": "Find the cities that have more than one employee under age 30. database is employee_hire_evaluation. tables are employee, shop, hiring, evaluation. columns in employee are employee id, name, age, city. columns in shop are shop id, name, location, district, number products, manager name. columns in hiring are shop id, employee id, start from, is full time. columns in evaluation are employee id, year awarded, bonus.",
    "target": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1"
  },
  {
    "prompt": "What is total bonus given in all evaluations? database is employee_hire_evaluation. tables are employee, shop, hiring, evaluation. columns in employee are employee id, name, age, city. columns in shop are shop id, name, location, district, number products, manager name. columns in hiring are shop id, employee id, start from, is full time. columns in evaluation are employee id, year awarded, bonus.",
    "target": "SELECT sum(bonus) FROM evaluation"
  },
  {
    "prompt": "Find the total amount of bonus given in all the evaluations. database is employee_hire_evaluation. tables are employee, shop, hiring, evaluation. columns in employee are employee id, name, age, city. columns in shop are shop id, name, location, district, number products, manager name. columns in hiring are shop id, employee id, start from, is full time. columns in evaluation are employee id, year awarded, bonus.",
    "target": "SELECT sum(bonus) FROM evaluation"
  },
  {
    "prompt": "Give me all the information about hiring. database is employee_hire_evaluation. tables are employee, shop, hiring, evaluation. columns in employee are employee id, name, age, city. columns in shop are shop id, name, location, district, number products, manager name. columns in hiring are shop id, employee id, start from, is full time. columns in evaluation are employee id, year awarded, bonus.",
    "target": "SELECT * FROM hiring"
  },
  {
    "prompt": "What is all the information about hiring? database is employee_hire_evaluation. tables are employee, shop, hiring, evaluation. columns in employee are employee id, name, age, city. columns in shop are shop id, name, location, district, number products, manager name. columns in hiring are shop id, employee id, start from, is full time. columns in evaluation are employee id, year awarded, bonus.",
    "target": "SELECT * FROM hiring"
  },
  {
    "prompt": "How many different store locations are there? database is employee_hire_evaluation. tables are employee, shop, hiring, evaluation. columns in employee are employee id, name, age, city. columns in shop are shop id, name, location, district, number products, manager name. columns in hiring are shop id, employee id, start from, is full time. columns in evaluation are employee id, year awarded, bonus.",
    "target": "SELECT count(DISTINCT LOCATION) FROM shop"
  },
  {
    "prompt": "Count the number of distinct store locations. database is employee_hire_evaluation. tables are employee, shop, hiring, evaluation. columns in employee are employee id, name, age, city. columns in shop are shop id, name, location, district, number products, manager name. columns in hiring are shop id, employee id, start from, is full time. columns in evaluation are employee id, year awarded, bonus.",
    "target": "SELECT count(DISTINCT LOCATION) FROM shop"
  },
  {
    "prompt": "How many documents do we have? database is cre_Doc_Template_Mgt. tables are reference template types, templates, documents, paragraphs. columns in reference template types are template type code, template type description. columns in templates are template id, version number, template type code, date effective from, date effective to, template details. columns in documents are document id, template id, document name, document description, other details. columns in paragraphs are paragraph id, document id, paragraph text, other details.",
    "target": "SELECT count(*) FROM Documents"
  },
  {
    "prompt": "Count the number of documents. database is cre_Doc_Template_Mgt. tables are reference template types, templates, documents, paragraphs. columns in reference template types are template type code, template type description. columns in templates are template id, version number, template type code, date effective from, date effective to, template details. columns in documents are document id, template id, document name, document description, other details. columns in paragraphs are paragraph id, document id, paragraph text, other details.",
    "target": "SELECT count(*) FROM Documents"
  },
  {
    "prompt": "How many different templates do all document use? database is cre_Doc_Template_Mgt. tables are reference template types, templates, documents, paragraphs. columns in reference template types are template type code, template type description. columns in templates are template id, version number, template type code, date effective from, date effective to, template details. columns in documents are document id, template id, document name, document description, other details. columns in paragraphs are paragraph id, document id, paragraph text, other details.",
    "target": "SELECT count(DISTINCT template_id) FROM Documents"
  },
  {
    "prompt": "Count the number of different templates used for documents. database is cre_Doc_Template_Mgt. tables are reference template types, templates, documents, paragraphs. columns in reference template types are template type code, template type description. columns in templates are template id, version number, template type code, date effective from, date effective to, template details. columns in documents are document id, template id, document name, document description, other details. columns in paragraphs are paragraph id, document id, paragraph text, other details.",
    "target": "SELECT count(DISTINCT template_id) FROM Documents"
  },
  {
    "prompt": "Show ids for all templates that are used by more than one document. database is cre_Doc_Template_Mgt. tables are reference template types, templates, documents, paragraphs. columns in reference template types are template type code, template type description. columns in templates are template id, version number, template type code, date effective from, date effective to, template details. columns in documents are document id, template id, document name, document description, other details. columns in paragraphs are paragraph id, document id, paragraph text, other details.",
    "target": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1"
  },
  {
    "prompt": "What are the template ids of any templates used in more than a single document? database is cre_Doc_Template_Mgt. tables are reference template types, templates, documents, paragraphs. columns in reference template types are template type code, template type description. columns in templates are template id, version number, template type code, date effective from, date effective to, template details. columns in documents are document id, template id, document name, document description, other details. columns in paragraphs are paragraph id, document id, paragraph text, other details.",
    "target": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1"
  },
  {
    "prompt": "Show ids for all templates not used by any document. database is cre_Doc_Template_Mgt. tables are reference template types, templates, documents, paragraphs. columns in reference template types are template type code, template type description. columns in templates are template id, version number, template type code, date effective from, date effective to, template details. columns in documents are document id, template id, document name, document description, other details. columns in paragraphs are paragraph id, document id, paragraph text, other details.",
    "target": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents"
  },
  {
    "prompt": "What are the ids for templates that are not used in any documents? database is cre_Doc_Template_Mgt. tables are reference template types, templates, documents, paragraphs. columns in reference template types are template type code, template type description. columns in templates are template id, version number, template type code, date effective from, date effective to, template details. columns in documents are document id, template id, document name, document description, other details. columns in paragraphs are paragraph id, document id, paragraph text, other details.",
    "target": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents"
  },
  {
    "prompt": "How many templates do we have? database is cre_Doc_Template_Mgt. tables are reference template types, templates, documents, paragraphs. columns in reference template types are template type code, template type description. columns in templates are template id, version number, template type code, date effective from, date effective to, template details. columns in documents are document id, template id, document name, document description, other details. columns in paragraphs are paragraph id, document id, paragraph text, other details.",
    "target": "SELECT count(*) FROM Templates"
  },
  {
    "prompt": "Count the number of templates. database is cre_Doc_Template_Mgt. tables are reference template types, templates, documents, paragraphs. columns in reference template types are template type code, template type description. columns in templates are template id, version number, template type code, date effective from, date effective to, template details. columns in documents are document id, template id, document name, document description, other details. columns in paragraphs are paragraph id, document id, paragraph text, other details.",
    "target": "SELECT count(*) FROM Templates"
  },
  {
    "prompt": "Show all distinct template type codes for all templates. database is cre_Doc_Template_Mgt. tables are reference template types, templates, documents, paragraphs. columns in reference template types are template type code, template type description. columns in templates are template id, version number, template type code, date effective from, date effective to, template details. columns in documents are document id, template id, document name, document description, other details. columns in paragraphs are paragraph id, document id, paragraph text, other details.",
    "target": "SELECT DISTINCT template_type_code FROM Templates"
  },
  {
    "prompt": "What are the different template type codes? database is cre_Doc_Template_Mgt. tables are reference template types, templates, documents, paragraphs. columns in reference template types are template type code, template type description. columns in templates are template id, version number, template type code, date effective from, date effective to, template details. columns in documents are document id, template id, document name, document description, other details. columns in paragraphs are paragraph id, document id, paragraph text, other details.",
    "target": "SELECT DISTINCT template_type_code FROM Templates"
  },
  {
    "prompt": "How many templates have template type code CV? database is cre_Doc_Template_Mgt. tables are reference template types, templates, documents, paragraphs. columns in reference template types are template type code, template type description. columns in templates are template id, version number, template type code, date effective from, date effective to, template details. columns in documents are document id, template id, document name, document description, other details. columns in paragraphs are paragraph id, document id, paragraph text, other details.",
    "target": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\""
  },
  {
    "prompt": "Count the number of templates of the type CV. database is cre_Doc_Template_Mgt. tables are reference template types, templates, documents, paragraphs. columns in reference template types are template type code, template type description. columns in templates are template id, version number, template type code, date effective from, date effective to, template details. columns in documents are document id, template id, document name, document description, other details. columns in paragraphs are paragraph id, document id, paragraph text, other details.",
    "target": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\""
  },
  {
    "prompt": "Show all template type codes with less than three templates. database is cre_Doc_Template_Mgt. tables are reference template types, templates, documents, paragraphs. columns in reference template types are template type code, template type description. columns in templates are template id, version number, template type code, date effective from, date effective to, template details. columns in documents are document id, template id, document name, document description, other details. columns in paragraphs are paragraph id, document id, paragraph text, other details.",
    "target": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3"
  },
  {
    "prompt": "What are the codes of template types that have fewer than 3 templates? database is cre_Doc_Template_Mgt. tables are reference template types, templates, documents, paragraphs. columns in reference template types are template type code, template type description. columns in templates are template id, version number, template type code, date effective from, date effective to, template details. columns in documents are document id, template id, document name, document description, other details. columns in paragraphs are paragraph id, document id, paragraph text, other details.",
    "target": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3"
  },
  {
    "prompt": "What is the template type descriptions for template type code \"AD\". database is cre_Doc_Template_Mgt. tables are reference template types, templates, documents, paragraphs. columns in reference template types are template type code, template type description. columns in templates are template id, version number, template type code, date effective from, date effective to, template details. columns in documents are document id, template id, document name, document description, other details. columns in paragraphs are paragraph id, document id, paragraph text, other details.",
    "target": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\""
  },
  {
    "prompt": "Return the template type description of the template type with the code AD. database is cre_Doc_Template_Mgt. tables are reference template types, templates, documents, paragraphs. columns in reference template types are template type code, template type description. columns in templates are template id, version number, template type code, date effective from, date effective to, template details. columns in documents are document id, template id, document name, document description, other details. columns in paragraphs are paragraph id, document id, paragraph text, other details.",
    "target": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\""
  },
  {
    "prompt": "What is the template type code for template type description \"Book\". database is cre_Doc_Template_Mgt. tables are reference template types, templates, documents, paragraphs. columns in reference template types are template type code, template type description. columns in templates are template id, version number, template type code, date effective from, date effective to, template details. columns in documents are document id, template id, document name, document description, other details. columns in paragraphs are paragraph id, document id, paragraph text, other details.",
    "target": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""
  },
  {
    "prompt": "Return the type code of the template type with the description \"Book\". database is cre_Doc_Template_Mgt. tables are reference template types, templates, documents, paragraphs. columns in reference template types are template type code, template type description. columns in templates are template id, version number, template type code, date effective from, date effective to, template details. columns in documents are document id, template id, document name, document description, other details. columns in paragraphs are paragraph id, document id, paragraph text, other details.",
    "target": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""
  },
  {
    "prompt": "How many paragraphs in total? database is cre_Doc_Template_Mgt. tables are reference template types, templates, documents, paragraphs. columns in reference template types are template type code, template type description. columns in templates are template id, version number, template type code, date effective from, date effective to, template details. columns in documents are document id, template id, document name, document description, other details. columns in paragraphs are paragraph id, document id, paragraph text, other details.",
    "target": "SELECT count(*) FROM Paragraphs"
  },
  {
    "prompt": "Count the number of paragraphs. database is cre_Doc_Template_Mgt. tables are reference template types, templates, documents, paragraphs. columns in reference template types are template type code, template type description. columns in templates are template id, version number, template type code, date effective from, date effective to, template details. columns in documents are document id, template id, document name, document description, other details. columns in paragraphs are paragraph id, document id, paragraph text, other details.",
    "target": "SELECT count(*) FROM Paragraphs"
  },
  {
    "prompt": "Show paragraph details for paragraph with text Korea  . database is cre_Doc_Template_Mgt. tables are reference template types, templates, documents, paragraphs. columns in reference template types are template type code, template type description. columns in templates are template id, version number, template type code, date effective from, date effective to, template details. columns in documents are document id, template id, document name, document description, other details. columns in paragraphs are paragraph id, document id, paragraph text, other details.",
    "target": "select other_details from paragraphs where paragraph_text like 'korea'"
  },
  {
    "prompt": "What are the details for the paragraph that includes the text Korea  ? database is cre_Doc_Template_Mgt. tables are reference template types, templates, documents, paragraphs. columns in reference template types are template type code, template type description. columns in templates are template id, version number, template type code, date effective from, date effective to, template details. columns in documents are document id, template id, document name, document description, other details. columns in paragraphs are paragraph id, document id, paragraph text, other details.",
    "target": "select other_details from paragraphs where paragraph_text like 'korea'"
  },
  {
    "prompt": "List all document ids with at least two paragraphs. database is cre_Doc_Template_Mgt. tables are reference template types, templates, documents, paragraphs. columns in reference template types are template type code, template type description. columns in templates are template id, version number, template type code, date effective from, date effective to, template details. columns in documents are document id, template id, document name, document description, other details. columns in paragraphs are paragraph id, document id, paragraph text, other details.",
    "target": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2"
  },
  {
    "prompt": "What are the ids of documents that have 2 or more paragraphs? database is cre_Doc_Template_Mgt. tables are reference template types, templates, documents, paragraphs. columns in reference template types are template type code, template type description. columns in templates are template id, version number, template type code, date effective from, date effective to, template details. columns in documents are document id, template id, document name, document description, other details. columns in paragraphs are paragraph id, document id, paragraph text, other details.",
    "target": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2"
  },
  {
    "prompt": "How many teachers are there? database is course_teach. tables are course, teacher, course arrange. columns in course are course id, staring date, course. columns in teacher are teacher id, name, age, hometown. columns in course arrange are course id, teacher id, grade.",
    "target": "SELECT count(*) FROM teacher"
  },
  {
    "prompt": "What is the total count of teachers? database is course_teach. tables are course, teacher, course arrange. columns in course are course id, staring date, course. columns in teacher are teacher id, name, age, hometown. columns in course arrange are course id, teacher id, grade.",
    "target": "SELECT count(*) FROM teacher"
  },
  {
    "prompt": "List the names of teachers in ascending order of age. database is course_teach. tables are course, teacher, course arrange. columns in course are course id, staring date, course. columns in teacher are teacher id, name, age, hometown. columns in course arrange are course id, teacher id, grade.",
    "target": "SELECT Name FROM teacher ORDER BY Age ASC"
  },
  {
    "prompt": "What are the names of the teachers ordered by ascending age? database is course_teach. tables are course, teacher, course arrange. columns in course are course id, staring date, course. columns in teacher are teacher id, name, age, hometown. columns in course arrange are course id, teacher id, grade.",
    "target": "SELECT Name FROM teacher ORDER BY Age ASC"
  },
  {
    "prompt": "List the name of teachers whose hometown is not `` Little Lever Urban District  . database is course_teach. tables are course, teacher, course arrange. columns in course are course id, staring date, course. columns in teacher are teacher id, name, age, hometown. columns in course arrange are course id, teacher id, grade.",
    "target": "select name from teacher where hometown != \"little lever urban district\""
  },
  {
    "prompt": "What are the names of the teachers whose hometown is not `` Little Lever Urban District  ? database is course_teach. tables are course, teacher, course arrange. columns in course are course id, staring date, course. columns in teacher are teacher id, name, age, hometown. columns in course arrange are course id, teacher id, grade.",
    "target": "select name from teacher where hometown != \"little lever urban district\""
  },
  {
    "prompt": "What is the hometown of the youngest teacher? database is course_teach. tables are course, teacher, course arrange. columns in course are course id, staring date, course. columns in teacher are teacher id, name, age, hometown. columns in course arrange are course id, teacher id, grade.",
    "target": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"
  },
  {
    "prompt": "Where is the youngest teacher from? database is course_teach. tables are course, teacher, course arrange. columns in course are course id, staring date, course. columns in teacher are teacher id, name, age, hometown. columns in course arrange are course id, teacher id, grade.",
    "target": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"
  },
  {
    "prompt": "Show the hometowns shared by at least two teachers. database is course_teach. tables are course, teacher, course arrange. columns in course are course id, staring date, course. columns in teacher are teacher id, name, age, hometown. columns in course arrange are course id, teacher id, grade.",
    "target": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2"
  },
  {
    "prompt": "What are the towns from which at least two teachers come from? database is course_teach. tables are course, teacher, course arrange. columns in course are course id, staring date, course. columns in teacher are teacher id, name, age, hometown. columns in course arrange are course id, teacher id, grade.",
    "target": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2"
  },
  {
    "prompt": "Find the average number of staff working for the museums that were open before 2009. database is museum_visit. tables are museum, customer, visit. columns in museum are museum id, name, num of staff, open year. columns in customer are customer id, name, level of membership, age. columns in visit are museum id, customer id, num of ticket, total spent.",
    "target": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009"
  },
  {
    "prompt": "Find the total number of players. database is wta_1. tables are players, matches, rankings. columns in players are player id, first name, last name, hand, birth date, country code. columns in matches are best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year. columns in rankings are ranking date, ranking, player id, ranking points, tours.",
    "target": "SELECT count(*) FROM players"
  },
  {
    "prompt": "How many players are there? database is wta_1. tables are players, matches, rankings. columns in players are player id, first name, last name, hand, birth date, country code. columns in matches are best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year. columns in rankings are ranking date, ranking, player id, ranking points, tours.",
    "target": "SELECT count(*) FROM players"
  },
  {
    "prompt": "Find the total number of matches. database is wta_1. tables are players, matches, rankings. columns in players are player id, first name, last name, hand, birth date, country code. columns in matches are best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year. columns in rankings are ranking date, ranking, player id, ranking points, tours.",
    "target": "SELECT count(*) FROM matches"
  },
  {
    "prompt": "Count the number of matches. database is wta_1. tables are players, matches, rankings. columns in players are player id, first name, last name, hand, birth date, country code. columns in matches are best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year. columns in rankings are ranking date, ranking, player id, ranking points, tours.",
    "target": "SELECT count(*) FROM matches"
  },
  {
    "prompt": "Find the average rank of winners in all matches. database is wta_1. tables are players, matches, rankings. columns in players are player id, first name, last name, hand, birth date, country code. columns in matches are best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year. columns in rankings are ranking date, ranking, player id, ranking points, tours.",
    "target": "SELECT avg(winner_rank) FROM matches"
  },
  {
    "prompt": "What is the average rank for winners in all matches? database is wta_1. tables are players, matches, rankings. columns in players are player id, first name, last name, hand, birth date, country code. columns in matches are best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year. columns in rankings are ranking date, ranking, player id, ranking points, tours.",
    "target": "SELECT avg(winner_rank) FROM matches"
  },
  {
    "prompt": "Find the highest rank of losers in all matches. database is wta_1. tables are players, matches, rankings. columns in players are player id, first name, last name, hand, birth date, country code. columns in matches are best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year. columns in rankings are ranking date, ranking, player id, ranking points, tours.",
    "target": "SELECT min(loser_rank) FROM matches"
  },
  {
    "prompt": "What is the best rank of losers across all matches? database is wta_1. tables are players, matches, rankings. columns in players are player id, first name, last name, hand, birth date, country code. columns in matches are best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year. columns in rankings are ranking date, ranking, player id, ranking points, tours.",
    "target": "SELECT min(loser_rank) FROM matches"
  },
  {
    "prompt": "find the number of distinct country codes of all players. database is wta_1. tables are players, matches, rankings. columns in players are player id, first name, last name, hand, birth date, country code. columns in matches are best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year. columns in rankings are ranking date, ranking, player id, ranking points, tours.",
    "target": "SELECT count(DISTINCT country_code) FROM players"
  },
  {
    "prompt": "How many distinct countries do players come from? database is wta_1. tables are players, matches, rankings. columns in players are player id, first name, last name, hand, birth date, country code. columns in matches are best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year. columns in rankings are ranking date, ranking, player id, ranking points, tours.",
    "target": "SELECT count(DISTINCT country_code) FROM players"
  },
  {
    "prompt": "Find the number of distinct name of losers. database is wta_1. tables are players, matches, rankings. columns in players are player id, first name, last name, hand, birth date, country code. columns in matches are best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year. columns in rankings are ranking date, ranking, player id, ranking points, tours.",
    "target": "SELECT count(DISTINCT loser_name) FROM matches"
  },
  {
    "prompt": "How many different loser names are there? database is wta_1. tables are players, matches, rankings. columns in players are player id, first name, last name, hand, birth date, country code. columns in matches are best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year. columns in rankings are ranking date, ranking, player id, ranking points, tours.",
    "target": "SELECT count(DISTINCT loser_name) FROM matches"
  },
  {
    "prompt": "Find the name of tourney that has more than 10 matches. database is wta_1. tables are players, matches, rankings. columns in players are player id, first name, last name, hand, birth date, country code. columns in matches are best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year. columns in rankings are ranking date, ranking, player id, ranking points, tours.",
    "target": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10"
  },
  {
    "prompt": "What are the names of tournaments that have more than 10 matches? database is wta_1. tables are players, matches, rankings. columns in players are player id, first name, last name, hand, birth date, country code. columns in matches are best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year. columns in rankings are ranking date, ranking, player id, ranking points, tours.",
    "target": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10"
  },
  {
    "prompt": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney. database is wta_1. tables are players, matches, rankings. columns in players are player id, first name, last name, hand, birth date, country code. columns in matches are best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year. columns in rankings are ranking date, ranking, player id, ranking points, tours.",
    "target": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"
  },
  {
    "prompt": "What is the name of the winner with the most rank points who participated in the Australian Open tournament? database is wta_1. tables are players, matches, rankings. columns in players are player id, first name, last name, hand, birth date, country code. columns in matches are best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year. columns in rankings are ranking date, ranking, player id, ranking points, tours.",
    "target": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"
  },
  {
    "prompt": "Find the codes of countries that have more than 50 players. database is wta_1. tables are players, matches, rankings. columns in players are player id, first name, last name, hand, birth date, country code. columns in matches are best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year. columns in rankings are ranking date, ranking, player id, ranking points, tours.",
    "target": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50"
  },
  {
    "prompt": "What are the codes of countries with more than 50 players? database is wta_1. tables are players, matches, rankings. columns in players are player id, first name, last name, hand, birth date, country code. columns in matches are best of, draw size, loser age, loser entry, loser hand, loser ht, loser id, loser ioc, loser name, loser rank, loser rank points, loser seed, match num, minutes, round, score, surface, tourney date, tourney id, tourney level, tourney name, winner age, winner entry, winner hand, winner ht, winner id, winner ioc, winner name, winner rank, winner rank points, winner seed, year. columns in rankings are ranking date, ranking, player id, ranking points, tours.",
    "target": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50"
  },
  {
    "prompt": "How many ships ended up being Captured? database is battle_death. tables are battle, ship, death. columns in battle are id, name, date, bulgarian commander, latin commander, result. columns in ship are lost in battle, id, name, tonnage, ship type, location, disposition of ship. columns in death are caused by ship id, id, note, killed, injured.",
    "target": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'"
  },
  {
    "prompt": "What is the average number of injuries caused each time? database is battle_death. tables are battle, ship, death. columns in battle are id, name, date, bulgarian commander, latin commander, result. columns in ship are lost in battle, id, name, tonnage, ship type, location, disposition of ship. columns in death are caused by ship id, id, note, killed, injured.",
    "target": "SELECT avg(injured) FROM death"
  },
  {
    "prompt": "How many different results are there for the battles? database is battle_death. tables are battle, ship, death. columns in battle are id, name, date, bulgarian commander, latin commander, result. columns in ship are lost in battle, id, name, tonnage, ship type, location, disposition of ship. columns in death are caused by ship id, id, note, killed, injured.",
    "target": "SELECT count(DISTINCT RESULT) FROM battle"
  },
  {
    "prompt": "What are the notes of the death events which has substring East? database is battle_death. tables are battle, ship, death. columns in battle are id, name, date, bulgarian commander, latin commander, result. columns in ship are lost in battle, id, name, tonnage, ship type, location, disposition of ship. columns in death are caused by ship id, id, note, killed, injured.",
    "target": "SELECT note FROM death WHERE note LIKE '%East%'"
  },
  {
    "prompt": "How many courses in total are listed? database is student_transcripts_tracking. tables are addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents. columns in addresses are address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details. columns in courses are course id, course name, course description, other details. columns in departments are department id, department name, department description, other details. columns in degree programs are degree program id, department id, degree summary name, degree summary description, other details. columns in sections are section id, course id, section name, section description, other details. columns in semesters are semester id, semester name, semester description, other details. columns in students are student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details. columns in student enrolment are student enrolment id, degree program id, semester id, student id, other details. columns in student enrolment courses are student course id, course id, student enrolment id. columns in transcripts are transcript id, transcript date, other details. columns in transcript contents are student course id, transcript id.",
    "target": "SELECT count(*) FROM Courses"
  },
  {
    "prompt": "How many courses are there? database is student_transcripts_tracking. tables are addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents. columns in addresses are address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details. columns in courses are course id, course name, course description, other details. columns in departments are department id, department name, department description, other details. columns in degree programs are degree program id, department id, degree summary name, degree summary description, other details. columns in sections are section id, course id, section name, section description, other details. columns in semesters are semester id, semester name, semester description, other details. columns in students are student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details. columns in student enrolment are student enrolment id, degree program id, semester id, student id, other details. columns in student enrolment courses are student course id, course id, student enrolment id. columns in transcripts are transcript id, transcript date, other details. columns in transcript contents are student course id, transcript id.",
    "target": "SELECT count(*) FROM Courses"
  },
  {
    "prompt": "How is the math course described? database is student_transcripts_tracking. tables are addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents. columns in addresses are address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details. columns in courses are course id, course name, course description, other details. columns in departments are department id, department name, department description, other details. columns in degree programs are degree program id, department id, degree summary name, degree summary description, other details. columns in sections are section id, course id, section name, section description, other details. columns in semesters are semester id, semester name, semester description, other details. columns in students are student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details. columns in student enrolment are student enrolment id, degree program id, semester id, student id, other details. columns in student enrolment courses are student course id, course id, student enrolment id. columns in transcripts are transcript id, transcript date, other details. columns in transcript contents are student course id, transcript id.",
    "target": "SELECT course_description FROM Courses WHERE course_name  =  'math'"
  },
  {
    "prompt": "What are the descriptions for all the math courses? database is student_transcripts_tracking. tables are addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents. columns in addresses are address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details. columns in courses are course id, course name, course description, other details. columns in departments are department id, department name, department description, other details. columns in degree programs are degree program id, department id, degree summary name, degree summary description, other details. columns in sections are section id, course id, section name, section description, other details. columns in semesters are semester id, semester name, semester description, other details. columns in students are student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details. columns in student enrolment are student enrolment id, degree program id, semester id, student id, other details. columns in student enrolment courses are student course id, course id, student enrolment id. columns in transcripts are transcript id, transcript date, other details. columns in transcript contents are student course id, transcript id.",
    "target": "SELECT course_description FROM Courses WHERE course_name  =  'math'"
  },
  {
    "prompt": "What is the zip code of the address in the city Port Chelsea? database is student_transcripts_tracking. tables are addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents. columns in addresses are address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details. columns in courses are course id, course name, course description, other details. columns in departments are department id, department name, department description, other details. columns in degree programs are degree program id, department id, degree summary name, degree summary description, other details. columns in sections are section id, course id, section name, section description, other details. columns in semesters are semester id, semester name, semester description, other details. columns in students are student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details. columns in student enrolment are student enrolment id, degree program id, semester id, student id, other details. columns in student enrolment courses are student course id, course id, student enrolment id. columns in transcripts are transcript id, transcript date, other details. columns in transcript contents are student course id, transcript id.",
    "target": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"
  },
  {
    "prompt": "What is the zip code for Port Chelsea? database is student_transcripts_tracking. tables are addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents. columns in addresses are address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details. columns in courses are course id, course name, course description, other details. columns in departments are department id, department name, department description, other details. columns in degree programs are degree program id, department id, degree summary name, degree summary description, other details. columns in sections are section id, course id, section name, section description, other details. columns in semesters are semester id, semester name, semester description, other details. columns in students are student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details. columns in student enrolment are student enrolment id, degree program id, semester id, student id, other details. columns in student enrolment courses are student course id, course id, student enrolment id. columns in transcripts are transcript id, transcript date, other details. columns in transcript contents are student course id, transcript id.",
    "target": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"
  },
  {
    "prompt": "How many departments offer any degree? database is student_transcripts_tracking. tables are addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents. columns in addresses are address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details. columns in courses are course id, course name, course description, other details. columns in departments are department id, department name, department description, other details. columns in degree programs are degree program id, department id, degree summary name, degree summary description, other details. columns in sections are section id, course id, section name, section description, other details. columns in semesters are semester id, semester name, semester description, other details. columns in students are student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details. columns in student enrolment are student enrolment id, degree program id, semester id, student id, other details. columns in student enrolment courses are student course id, course id, student enrolment id. columns in transcripts are transcript id, transcript date, other details. columns in transcript contents are student course id, transcript id.",
    "target": "SELECT count(DISTINCT department_id) FROM Degree_Programs"
  },
  {
    "prompt": "How many different departments offer degrees? database is student_transcripts_tracking. tables are addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents. columns in addresses are address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details. columns in courses are course id, course name, course description, other details. columns in departments are department id, department name, department description, other details. columns in degree programs are degree program id, department id, degree summary name, degree summary description, other details. columns in sections are section id, course id, section name, section description, other details. columns in semesters are semester id, semester name, semester description, other details. columns in students are student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details. columns in student enrolment are student enrolment id, degree program id, semester id, student id, other details. columns in student enrolment courses are student course id, course id, student enrolment id. columns in transcripts are transcript id, transcript date, other details. columns in transcript contents are student course id, transcript id.",
    "target": "SELECT count(DISTINCT department_id) FROM Degree_Programs"
  },
  {
    "prompt": "How many different degree names are offered? database is student_transcripts_tracking. tables are addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents. columns in addresses are address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details. columns in courses are course id, course name, course description, other details. columns in departments are department id, department name, department description, other details. columns in degree programs are degree program id, department id, degree summary name, degree summary description, other details. columns in sections are section id, course id, section name, section description, other details. columns in semesters are semester id, semester name, semester description, other details. columns in students are student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details. columns in student enrolment are student enrolment id, degree program id, semester id, student id, other details. columns in student enrolment courses are student course id, course id, student enrolment id. columns in transcripts are transcript id, transcript date, other details. columns in transcript contents are student course id, transcript id.",
    "target": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"
  },
  {
    "prompt": "How many different degrees are offered? database is student_transcripts_tracking. tables are addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents. columns in addresses are address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details. columns in courses are course id, course name, course description, other details. columns in departments are department id, department name, department description, other details. columns in degree programs are degree program id, department id, degree summary name, degree summary description, other details. columns in sections are section id, course id, section name, section description, other details. columns in semesters are semester id, semester name, semester description, other details. columns in students are student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details. columns in student enrolment are student enrolment id, degree program id, semester id, student id, other details. columns in student enrolment courses are student course id, course id, student enrolment id. columns in transcripts are transcript id, transcript date, other details. columns in transcript contents are student course id, transcript id.",
    "target": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"
  },
  {
    "prompt": "List the section_name in reversed lexicographical order. database is student_transcripts_tracking. tables are addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents. columns in addresses are address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details. columns in courses are course id, course name, course description, other details. columns in departments are department id, department name, department description, other details. columns in degree programs are degree program id, department id, degree summary name, degree summary description, other details. columns in sections are section id, course id, section name, section description, other details. columns in semesters are semester id, semester name, semester description, other details. columns in students are student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details. columns in student enrolment are student enrolment id, degree program id, semester id, student id, other details. columns in student enrolment courses are student course id, course id, student enrolment id. columns in transcripts are transcript id, transcript date, other details. columns in transcript contents are student course id, transcript id.",
    "target": "SELECT section_name FROM Sections ORDER BY section_name DESC"
  },
  {
    "prompt": "What are the names of the sections in reverse alphabetical order? database is student_transcripts_tracking. tables are addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents. columns in addresses are address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details. columns in courses are course id, course name, course description, other details. columns in departments are department id, department name, department description, other details. columns in degree programs are degree program id, department id, degree summary name, degree summary description, other details. columns in sections are section id, course id, section name, section description, other details. columns in semesters are semester id, semester name, semester description, other details. columns in students are student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details. columns in student enrolment are student enrolment id, degree program id, semester id, student id, other details. columns in student enrolment courses are student course id, course id, student enrolment id. columns in transcripts are transcript id, transcript date, other details. columns in transcript contents are student course id, transcript id.",
    "target": "SELECT section_name FROM Sections ORDER BY section_name DESC"
  },
  {
    "prompt": "What is the description of the department whose name has the substring the computer? database is student_transcripts_tracking. tables are addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents. columns in addresses are address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details. columns in courses are course id, course name, course description, other details. columns in departments are department id, department name, department description, other details. columns in degree programs are degree program id, department id, degree summary name, degree summary description, other details. columns in sections are section id, course id, section name, section description, other details. columns in semesters are semester id, semester name, semester description, other details. columns in students are student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details. columns in student enrolment are student enrolment id, degree program id, semester id, student id, other details. columns in student enrolment courses are student course id, course id, student enrolment id. columns in transcripts are transcript id, transcript date, other details. columns in transcript contents are student course id, transcript id.",
    "target": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"
  },
  {
    "prompt": "What is the department description for the one whose name has the word computer? database is student_transcripts_tracking. tables are addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents. columns in addresses are address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details. columns in courses are course id, course name, course description, other details. columns in departments are department id, department name, department description, other details. columns in degree programs are degree program id, department id, degree summary name, degree summary description, other details. columns in sections are section id, course id, section name, section description, other details. columns in semesters are semester id, semester name, semester description, other details. columns in students are student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details. columns in student enrolment are student enrolment id, degree program id, semester id, student id, other details. columns in student enrolment courses are student course id, course id, student enrolment id. columns in transcripts are transcript id, transcript date, other details. columns in transcript contents are student course id, transcript id.",
    "target": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"
  },
  {
    "prompt": "On average, when were the transcripts printed? database is student_transcripts_tracking. tables are addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents. columns in addresses are address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details. columns in courses are course id, course name, course description, other details. columns in departments are department id, department name, department description, other details. columns in degree programs are degree program id, department id, degree summary name, degree summary description, other details. columns in sections are section id, course id, section name, section description, other details. columns in semesters are semester id, semester name, semester description, other details. columns in students are student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details. columns in student enrolment are student enrolment id, degree program id, semester id, student id, other details. columns in student enrolment courses are student course id, course id, student enrolment id. columns in transcripts are transcript id, transcript date, other details. columns in transcript contents are student course id, transcript id.",
    "target": "SELECT avg(transcript_date) FROM Transcripts"
  },
  {
    "prompt": "What is the average transcript date? database is student_transcripts_tracking. tables are addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents. columns in addresses are address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details. columns in courses are course id, course name, course description, other details. columns in departments are department id, department name, department description, other details. columns in degree programs are degree program id, department id, degree summary name, degree summary description, other details. columns in sections are section id, course id, section name, section description, other details. columns in semesters are semester id, semester name, semester description, other details. columns in students are student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details. columns in student enrolment are student enrolment id, degree program id, semester id, student id, other details. columns in student enrolment courses are student course id, course id, student enrolment id. columns in transcripts are transcript id, transcript date, other details. columns in transcript contents are student course id, transcript id.",
    "target": "SELECT avg(transcript_date) FROM Transcripts"
  },
  {
    "prompt": "How many transcripts are released? database is student_transcripts_tracking. tables are addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents. columns in addresses are address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details. columns in courses are course id, course name, course description, other details. columns in departments are department id, department name, department description, other details. columns in degree programs are degree program id, department id, degree summary name, degree summary description, other details. columns in sections are section id, course id, section name, section description, other details. columns in semesters are semester id, semester name, semester description, other details. columns in students are student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details. columns in student enrolment are student enrolment id, degree program id, semester id, student id, other details. columns in student enrolment courses are student course id, course id, student enrolment id. columns in transcripts are transcript id, transcript date, other details. columns in transcript contents are student course id, transcript id.",
    "target": "SELECT count(*) FROM Transcripts"
  },
  {
    "prompt": "How many transcripts are listed? database is student_transcripts_tracking. tables are addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents. columns in addresses are address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details. columns in courses are course id, course name, course description, other details. columns in departments are department id, department name, department description, other details. columns in degree programs are degree program id, department id, degree summary name, degree summary description, other details. columns in sections are section id, course id, section name, section description, other details. columns in semesters are semester id, semester name, semester description, other details. columns in students are student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details. columns in student enrolment are student enrolment id, degree program id, semester id, student id, other details. columns in student enrolment courses are student course id, course id, student enrolment id. columns in transcripts are transcript id, transcript date, other details. columns in transcript contents are student course id, transcript id.",
    "target": "SELECT count(*) FROM Transcripts"
  },
  {
    "prompt": "What is the last transcript release date? database is student_transcripts_tracking. tables are addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents. columns in addresses are address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details. columns in courses are course id, course name, course description, other details. columns in departments are department id, department name, department description, other details. columns in degree programs are degree program id, department id, degree summary name, degree summary description, other details. columns in sections are section id, course id, section name, section description, other details. columns in semesters are semester id, semester name, semester description, other details. columns in students are student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details. columns in student enrolment are student enrolment id, degree program id, semester id, student id, other details. columns in student enrolment courses are student course id, course id, student enrolment id. columns in transcripts are transcript id, transcript date, other details. columns in transcript contents are student course id, transcript id.",
    "target": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"
  },
  {
    "prompt": "When was the last transcript released? database is student_transcripts_tracking. tables are addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents. columns in addresses are address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details. columns in courses are course id, course name, course description, other details. columns in departments are department id, department name, department description, other details. columns in degree programs are degree program id, department id, degree summary name, degree summary description, other details. columns in sections are section id, course id, section name, section description, other details. columns in semesters are semester id, semester name, semester description, other details. columns in students are student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details. columns in student enrolment are student enrolment id, degree program id, semester id, student id, other details. columns in student enrolment courses are student course id, course id, student enrolment id. columns in transcripts are transcript id, transcript date, other details. columns in transcript contents are student course id, transcript id.",
    "target": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"
  },
  {
    "prompt": "How many different addresses do the students currently live? database is student_transcripts_tracking. tables are addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents. columns in addresses are address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details. columns in courses are course id, course name, course description, other details. columns in departments are department id, department name, department description, other details. columns in degree programs are degree program id, department id, degree summary name, degree summary description, other details. columns in sections are section id, course id, section name, section description, other details. columns in semesters are semester id, semester name, semester description, other details. columns in students are student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details. columns in student enrolment are student enrolment id, degree program id, semester id, student id, other details. columns in student enrolment courses are student course id, course id, student enrolment id. columns in transcripts are transcript id, transcript date, other details. columns in transcript contents are student course id, transcript id.",
    "target": "SELECT count(DISTINCT current_address_id) FROM Students"
  },
  {
    "prompt": "What are the different addresses that have students living there? database is student_transcripts_tracking. tables are addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents. columns in addresses are address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details. columns in courses are course id, course name, course description, other details. columns in departments are department id, department name, department description, other details. columns in degree programs are degree program id, department id, degree summary name, degree summary description, other details. columns in sections are section id, course id, section name, section description, other details. columns in semesters are semester id, semester name, semester description, other details. columns in students are student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details. columns in student enrolment are student enrolment id, degree program id, semester id, student id, other details. columns in student enrolment courses are student course id, course id, student enrolment id. columns in transcripts are transcript id, transcript date, other details. columns in transcript contents are student course id, transcript id.",
    "target": "SELECT count(DISTINCT current_address_id) FROM Students"
  },
  {
    "prompt": "List all the student details in reversed lexicographical order. database is student_transcripts_tracking. tables are addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents. columns in addresses are address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details. columns in courses are course id, course name, course description, other details. columns in departments are department id, department name, department description, other details. columns in degree programs are degree program id, department id, degree summary name, degree summary description, other details. columns in sections are section id, course id, section name, section description, other details. columns in semesters are semester id, semester name, semester description, other details. columns in students are student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details. columns in student enrolment are student enrolment id, degree program id, semester id, student id, other details. columns in student enrolment courses are student course id, course id, student enrolment id. columns in transcripts are transcript id, transcript date, other details. columns in transcript contents are student course id, transcript id.",
    "target": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC"
  },
  {
    "prompt": "What other details can you tell me about students in reverse alphabetical order? database is student_transcripts_tracking. tables are addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents. columns in addresses are address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details. columns in courses are course id, course name, course description, other details. columns in departments are department id, department name, department description, other details. columns in degree programs are degree program id, department id, degree summary name, degree summary description, other details. columns in sections are section id, course id, section name, section description, other details. columns in semesters are semester id, semester name, semester description, other details. columns in students are student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details. columns in student enrolment are student enrolment id, degree program id, semester id, student id, other details. columns in student enrolment courses are student course id, course id, student enrolment id. columns in transcripts are transcript id, transcript date, other details. columns in transcript contents are student course id, transcript id.",
    "target": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC"
  },
  {
    "prompt": "Describe the section h. database is student_transcripts_tracking. tables are addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents. columns in addresses are address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details. columns in courses are course id, course name, course description, other details. columns in departments are department id, department name, department description, other details. columns in degree programs are degree program id, department id, degree summary name, degree summary description, other details. columns in sections are section id, course id, section name, section description, other details. columns in semesters are semester id, semester name, semester description, other details. columns in students are student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details. columns in student enrolment are student enrolment id, degree program id, semester id, student id, other details. columns in student enrolment courses are student course id, course id, student enrolment id. columns in transcripts are transcript id, transcript date, other details. columns in transcript contents are student course id, transcript id.",
    "target": "SELECT section_description FROM Sections WHERE section_name  =  'h'"
  },
  {
    "prompt": "What is the description for the section named h? database is student_transcripts_tracking. tables are addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents. columns in addresses are address id, line 1, line 2, line 3, city, zip postcode, state province county, country, other address details. columns in courses are course id, course name, course description, other details. columns in departments are department id, department name, department description, other details. columns in degree programs are degree program id, department id, degree summary name, degree summary description, other details. columns in sections are section id, course id, section name, section description, other details. columns in semesters are semester id, semester name, semester description, other details. columns in students are student id, current address id, permanent address id, first name, middle name, last name, cell mobile number, email address, ssn, date first registered, date left, other student details. columns in student enrolment are student enrolment id, degree program id, semester id, student id, other details. columns in student enrolment courses are student course id, course id, student enrolment id. columns in transcripts are transcript id, transcript date, other details. columns in transcript contents are student course id, transcript id.",
    "target": "SELECT section_description FROM Sections WHERE section_name  =  'h'"
  },
  {
    "prompt": "List the title of all cartoons in alphabetical order. database is tvshow. tables are tv channel, tv series, cartoon. columns in tv channel are id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option. columns in tv series are id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel. columns in cartoon are id, title, directed by, written by, original air date, production code, channel.",
    "target": "SELECT Title FROM Cartoon ORDER BY title"
  },
  {
    "prompt": "What are the titles of the cartoons sorted alphabetically? database is tvshow. tables are tv channel, tv series, cartoon. columns in tv channel are id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option. columns in tv series are id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel. columns in cartoon are id, title, directed by, written by, original air date, production code, channel.",
    "target": "SELECT Title FROM Cartoon ORDER BY title"
  },
  {
    "prompt": "List all cartoon directed by \"Ben Jones\". database is tvshow. tables are tv channel, tv series, cartoon. columns in tv channel are id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option. columns in tv series are id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel. columns in cartoon are id, title, directed by, written by, original air date, production code, channel.",
    "target": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";"
  },
  {
    "prompt": "What are the names of all cartoons directed by Ben Jones? database is tvshow. tables are tv channel, tv series, cartoon. columns in tv channel are id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option. columns in tv series are id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel. columns in cartoon are id, title, directed by, written by, original air date, production code, channel.",
    "target": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";"
  },
  {
    "prompt": "How many cartoons were written by \"Joseph Kuhr\"? database is tvshow. tables are tv channel, tv series, cartoon. columns in tv channel are id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option. columns in tv series are id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel. columns in cartoon are id, title, directed by, written by, original air date, production code, channel.",
    "target": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";"
  },
  {
    "prompt": "What is the number of cartoones written by Joseph Kuhr? database is tvshow. tables are tv channel, tv series, cartoon. columns in tv channel are id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option. columns in tv series are id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel. columns in cartoon are id, title, directed by, written by, original air date, production code, channel.",
    "target": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";"
  },
  {
    "prompt": "What is the content of TV Channel with serial name \"Sky Radio\"? database is tvshow. tables are tv channel, tv series, cartoon. columns in tv channel are id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option. columns in tv series are id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel. columns in cartoon are id, title, directed by, written by, original air date, production code, channel.",
    "target": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";"
  },
  {
    "prompt": "What is the content of the series Sky Radio? database is tvshow. tables are tv channel, tv series, cartoon. columns in tv channel are id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option. columns in tv series are id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel. columns in cartoon are id, title, directed by, written by, original air date, production code, channel.",
    "target": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";"
  },
  {
    "prompt": "What is the Package Option of TV Channel with serial name \"Sky Radio\"? database is tvshow. tables are tv channel, tv series, cartoon. columns in tv channel are id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option. columns in tv series are id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel. columns in cartoon are id, title, directed by, written by, original air date, production code, channel.",
    "target": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";"
  },
  {
    "prompt": "What are the Package Options of the TV Channels whose series names are Sky Radio? database is tvshow. tables are tv channel, tv series, cartoon. columns in tv channel are id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option. columns in tv series are id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel. columns in cartoon are id, title, directed by, written by, original air date, production code, channel.",
    "target": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";"
  },
  {
    "prompt": "How many TV Channel using language English? database is tvshow. tables are tv channel, tv series, cartoon. columns in tv channel are id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option. columns in tv series are id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel. columns in cartoon are id, title, directed by, written by, original air date, production code, channel.",
    "target": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";"
  },
  {
    "prompt": "How many TV Channels use the English language? database is tvshow. tables are tv channel, tv series, cartoon. columns in tv channel are id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option. columns in tv series are id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel. columns in cartoon are id, title, directed by, written by, original air date, production code, channel.",
    "target": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";"
  },
  {
    "prompt": "List the Episode of all TV series sorted by rating. database is tvshow. tables are tv channel, tv series, cartoon. columns in tv channel are id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option. columns in tv series are id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel. columns in cartoon are id, title, directed by, written by, original air date, production code, channel.",
    "target": "SELECT Episode FROM TV_series ORDER BY rating"
  },
  {
    "prompt": "What are all of the episodes ordered by ratings? database is tvshow. tables are tv channel, tv series, cartoon. columns in tv channel are id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option. columns in tv series are id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel. columns in cartoon are id, title, directed by, written by, original air date, production code, channel.",
    "target": "SELECT Episode FROM TV_series ORDER BY rating"
  },
  {
    "prompt": "What is the air date of TV series with Episode \"A Love of a Lifetime\"? database is tvshow. tables are tv channel, tv series, cartoon. columns in tv channel are id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option. columns in tv series are id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel. columns in cartoon are id, title, directed by, written by, original air date, production code, channel.",
    "target": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";"
  },
  {
    "prompt": "When did the episode \"A Love of a Lifetime\" air? database is tvshow. tables are tv channel, tv series, cartoon. columns in tv channel are id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option. columns in tv series are id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel. columns in cartoon are id, title, directed by, written by, original air date, production code, channel.",
    "target": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";"
  },
  {
    "prompt": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"? database is tvshow. tables are tv channel, tv series, cartoon. columns in tv channel are id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option. columns in tv series are id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel. columns in cartoon are id, title, directed by, written by, original air date, production code, channel.",
    "target": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";"
  },
  {
    "prompt": "What is the weekly rank for the episode \"A Love of a Lifetime\"? database is tvshow. tables are tv channel, tv series, cartoon. columns in tv channel are id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option. columns in tv series are id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel. columns in cartoon are id, title, directed by, written by, original air date, production code, channel.",
    "target": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";"
  },
  {
    "prompt": "find id of the tv channels that from the countries where have more than two tv channels. database is tvshow. tables are tv channel, tv series, cartoon. columns in tv channel are id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option. columns in tv series are id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel. columns in cartoon are id, title, directed by, written by, original air date, production code, channel.",
    "target": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2"
  },
  {
    "prompt": "What are the ids of all tv channels that have more than 2 TV channels? database is tvshow. tables are tv channel, tv series, cartoon. columns in tv channel are id, series name, country, language, content, pixel aspect ratio par, hight definition tv, pay per view ppv, package option. columns in tv series are id, episode, air date, rating, share, 18 49 rating share, viewers m, weekly rank, channel. columns in cartoon are id, title, directed by, written by, original air date, production code, channel.",
    "target": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2"
  },
  {
    "prompt": "How many poker players are there? database is poker_player. tables are poker player, people. columns in poker player are poker player id, people id, final table made, best finish, money rank, earnings. columns in people are people id, nationality, name, birth date, height.",
    "target": "SELECT count(*) FROM poker_player"
  },
  {
    "prompt": "Count the number of poker players. database is poker_player. tables are poker player, people. columns in poker player are poker player id, people id, final table made, best finish, money rank, earnings. columns in people are people id, nationality, name, birth date, height.",
    "target": "SELECT count(*) FROM poker_player"
  },
  {
    "prompt": "List the earnings of poker players in descending order. database is poker_player. tables are poker player, people. columns in poker player are poker player id, people id, final table made, best finish, money rank, earnings. columns in people are people id, nationality, name, birth date, height.",
    "target": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC"
  },
  {
    "prompt": "What are the earnings of poker players, ordered descending by value? database is poker_player. tables are poker player, people. columns in poker player are poker player id, people id, final table made, best finish, money rank, earnings. columns in people are people id, nationality, name, birth date, height.",
    "target": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC"
  },
  {
    "prompt": "What is the average earnings of poker players? database is poker_player. tables are poker player, people. columns in poker player are poker player id, people id, final table made, best finish, money rank, earnings. columns in people are people id, nationality, name, birth date, height.",
    "target": "SELECT avg(Earnings) FROM poker_player"
  },
  {
    "prompt": "Return the average earnings across all poker players. database is poker_player. tables are poker player, people. columns in poker player are poker player id, people id, final table made, best finish, money rank, earnings. columns in people are people id, nationality, name, birth date, height.",
    "target": "SELECT avg(Earnings) FROM poker_player"
  },
  {
    "prompt": "What is the money rank of the poker player with the highest earnings? database is poker_player. tables are poker player, people. columns in poker player are poker player id, people id, final table made, best finish, money rank, earnings. columns in people are people id, nationality, name, birth date, height.",
    "target": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"
  },
  {
    "prompt": "Return the money rank of the player with the greatest earnings. database is poker_player. tables are poker player, people. columns in poker player are poker player id, people id, final table made, best finish, money rank, earnings. columns in people are people id, nationality, name, birth date, height.",
    "target": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"
  },
  {
    "prompt": "What is the maximum number of final tables made among poker players with earnings less than 200000? database is poker_player. tables are poker player, people. columns in poker player are poker player id, people id, final table made, best finish, money rank, earnings. columns in people are people id, nationality, name, birth date, height.",
    "target": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"
  },
  {
    "prompt": "Return the maximum final tables made across all poker players who have earnings below 200000. database is poker_player. tables are poker player, people. columns in poker player are poker player id, people id, final table made, best finish, money rank, earnings. columns in people are people id, nationality, name, birth date, height.",
    "target": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"
  },
  {
    "prompt": "What are the nationalities that are shared by at least two people? database is poker_player. tables are poker player, people. columns in poker player are poker player id, people id, final table made, best finish, money rank, earnings. columns in people are people id, nationality, name, birth date, height.",
    "target": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2"
  },
  {
    "prompt": "Return the nationalities for which there are two or more people. database is poker_player. tables are poker player, people. columns in poker player are poker player id, people id, final table made, best finish, money rank, earnings. columns in people are people id, nationality, name, birth date, height.",
    "target": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2"
  },
  {
    "prompt": "Show names of people whose nationality is not \"Russia\". database is poker_player. tables are poker player, people. columns in poker player are poker player id, people id, final table made, best finish, money rank, earnings. columns in people are people id, nationality, name, birth date, height.",
    "target": "SELECT Name FROM people WHERE Nationality != \"Russia\""
  },
  {
    "prompt": "What are the names of people who are not from Russia? database is poker_player. tables are poker player, people. columns in poker player are poker player id, people id, final table made, best finish, money rank, earnings. columns in people are people id, nationality, name, birth date, height.",
    "target": "SELECT Name FROM people WHERE Nationality != \"Russia\""
  },
  {
    "prompt": "How many distinct nationalities are there? database is poker_player. tables are poker player, people. columns in poker player are poker player id, people id, final table made, best finish, money rank, earnings. columns in people are people id, nationality, name, birth date, height.",
    "target": "SELECT count(DISTINCT Nationality) FROM people"
  },
  {
    "prompt": "Count the number of different nationalities. database is poker_player. tables are poker player, people. columns in poker player are poker player id, people id, final table made, best finish, money rank, earnings. columns in people are people id, nationality, name, birth date, height.",
    "target": "SELECT count(DISTINCT Nationality) FROM people"
  },
  {
    "prompt": "How many states are there? database is voter_1. tables are area code state, contestants, votes. columns in area code state are area code, state. columns in contestants are contestant number, contestant name. columns in votes are vote id, phone number, state, contestant number, created.",
    "target": "SELECT count(*) FROM area_code_state"
  },
  {
    "prompt": "What is last date created of votes from the state CA? database is voter_1. tables are area code state, contestants, votes. columns in area code state are area code, state. columns in contestants are contestant number, contestant name. columns in votes are vote id, phone number, state, contestant number, created.",
    "target": "SELECT max(created) FROM votes WHERE state  =  'CA'"
  },
  {
    "prompt": "What are the names of the contestants whose names are not Jessie Alloway database is voter_1. tables are area code state, contestants, votes. columns in area code state are area code, state. columns in contestants are contestant number, contestant name. columns in votes are vote id, phone number, state, contestant number, created.",
    "target": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'"
  },
  {
    "prompt": "Return the names of the contestants whose names contain the substring Al . database is voter_1. tables are area code state, contestants, votes. columns in area code state are area code, state. columns in contestants are contestant number, contestant name. columns in votes are vote id, phone number, state, contestant number, created.",
    "target": "select contestant_name from contestants where contestant_name like \"%al%\""
  },
  {
    "prompt": "What are the names of all the countries that became independent after 1950? database is world_1. tables are city, sqlite sequence, country, countrylanguage. columns in city are id, name, country code, district, population. columns in sqlite sequence are name, seq. columns in country are code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2. columns in countrylanguage are countrycode, language, is official, percentage.",
    "target": "SELECT Name FROM country WHERE IndepYear  >  1950"
  },
  {
    "prompt": "Give the names of the nations that were founded after 1950. database is world_1. tables are city, sqlite sequence, country, countrylanguage. columns in city are id, name, country code, district, population. columns in sqlite sequence are name, seq. columns in country are code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2. columns in countrylanguage are countrycode, language, is official, percentage.",
    "target": "SELECT Name FROM country WHERE IndepYear  >  1950"
  },
  {
    "prompt": "How many countries have a republic as their form of government? database is world_1. tables are city, sqlite sequence, country, countrylanguage. columns in city are id, name, country code, district, population. columns in sqlite sequence are name, seq. columns in country are code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2. columns in countrylanguage are countrycode, language, is official, percentage.",
    "target": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\""
  },
  {
    "prompt": "How many countries have governments that are republics? database is world_1. tables are city, sqlite sequence, country, countrylanguage. columns in city are id, name, country code, district, population. columns in sqlite sequence are name, seq. columns in country are code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2. columns in countrylanguage are countrycode, language, is official, percentage.",
    "target": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\""
  },
  {
    "prompt": "What is the total surface area of the countries in the Caribbean region? database is world_1. tables are city, sqlite sequence, country, countrylanguage. columns in city are id, name, country code, district, population. columns in sqlite sequence are name, seq. columns in country are code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2. columns in countrylanguage are countrycode, language, is official, percentage.",
    "target": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\""
  },
  {
    "prompt": "How much surface area do the countires in the Carribean cover together? database is world_1. tables are city, sqlite sequence, country, countrylanguage. columns in city are id, name, country code, district, population. columns in sqlite sequence are name, seq. columns in country are code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2. columns in countrylanguage are countrycode, language, is official, percentage.",
    "target": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\""
  },
  {
    "prompt": "Which continent is Anguilla in? database is world_1. tables are city, sqlite sequence, country, countrylanguage. columns in city are id, name, country code, district, population. columns in sqlite sequence are name, seq. columns in country are code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2. columns in countrylanguage are countrycode, language, is official, percentage.",
    "target": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\""
  },
  {
    "prompt": "What is the continent name which Anguilla belongs to? database is world_1. tables are city, sqlite sequence, country, countrylanguage. columns in city are id, name, country code, district, population. columns in sqlite sequence are name, seq. columns in country are code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2. columns in countrylanguage are countrycode, language, is official, percentage.",
    "target": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\""
  },
  {
    "prompt": "What is the average expected life expectancy for countries in the region of Central Africa? database is world_1. tables are city, sqlite sequence, country, countrylanguage. columns in city are id, name, country code, district, population. columns in sqlite sequence are name, seq. columns in country are code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2. columns in countrylanguage are countrycode, language, is official, percentage.",
    "target": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\""
  },
  {
    "prompt": "How long is the people\u2019s average life expectancy in Central Africa? database is world_1. tables are city, sqlite sequence, country, countrylanguage. columns in city are id, name, country code, district, population. columns in sqlite sequence are name, seq. columns in country are code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2. columns in countrylanguage are countrycode, language, is official, percentage.",
    "target": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\""
  },
  {
    "prompt": "What is the name of country that has the shortest life expectancy in Asia? database is world_1. tables are city, sqlite sequence, country, countrylanguage. columns in city are id, name, country code, district, population. columns in sqlite sequence are name, seq. columns in country are code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2. columns in countrylanguage are countrycode, language, is official, percentage.",
    "target": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"
  },
  {
    "prompt": "Give the name of the country in Asia with the lowest life expectancy. database is world_1. tables are city, sqlite sequence, country, countrylanguage. columns in city are id, name, country code, district, population. columns in sqlite sequence are name, seq. columns in country are code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2. columns in countrylanguage are countrycode, language, is official, percentage.",
    "target": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"
  },
  {
    "prompt": "How many people live in Gelderland district? database is world_1. tables are city, sqlite sequence, country, countrylanguage. columns in city are id, name, country code, district, population. columns in sqlite sequence are name, seq. columns in country are code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2. columns in countrylanguage are countrycode, language, is official, percentage.",
    "target": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\""
  },
  {
    "prompt": "What is the total population of Gelderland district? database is world_1. tables are city, sqlite sequence, country, countrylanguage. columns in city are id, name, country code, district, population. columns in sqlite sequence are name, seq. columns in country are code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2. columns in countrylanguage are countrycode, language, is official, percentage.",
    "target": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\""
  },
  {
    "prompt": "How many unique languages are spoken in the world? database is world_1. tables are city, sqlite sequence, country, countrylanguage. columns in city are id, name, country code, district, population. columns in sqlite sequence are name, seq. columns in country are code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2. columns in countrylanguage are countrycode, language, is official, percentage.",
    "target": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"
  },
  {
    "prompt": "What is the number of distinct languages used around the world? database is world_1. tables are city, sqlite sequence, country, countrylanguage. columns in city are id, name, country code, district, population. columns in sqlite sequence are name, seq. columns in country are code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2. columns in countrylanguage are countrycode, language, is official, percentage.",
    "target": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"
  },
  {
    "prompt": "How many type of governments are in Africa? database is world_1. tables are city, sqlite sequence, country, countrylanguage. columns in city are id, name, country code, district, population. columns in sqlite sequence are name, seq. columns in country are code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2. columns in countrylanguage are countrycode, language, is official, percentage.",
    "target": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""
  },
  {
    "prompt": "How many different forms of governments are there in Africa? database is world_1. tables are city, sqlite sequence, country, countrylanguage. columns in city are id, name, country code, district, population. columns in sqlite sequence are name, seq. columns in country are code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2. columns in countrylanguage are countrycode, language, is official, percentage.",
    "target": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""
  },
  {
    "prompt": "What are the country codes of countries where people use languages other than English? database is world_1. tables are city, sqlite sequence, country, countrylanguage. columns in city are id, name, country code, district, population. columns in sqlite sequence are name, seq. columns in country are code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2. columns in countrylanguage are countrycode, language, is official, percentage.",
    "target": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\""
  },
  {
    "prompt": "Give the country codes for countries in which people speak langauges that are not English. database is world_1. tables are city, sqlite sequence, country, countrylanguage. columns in city are id, name, country code, district, population. columns in sqlite sequence are name, seq. columns in country are code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2. columns in countrylanguage are countrycode, language, is official, percentage.",
    "target": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\""
  },
  {
    "prompt": "What are names of countries with the top 3 largest population? database is world_1. tables are city, sqlite sequence, country, countrylanguage. columns in city are id, name, country code, district, population. columns in sqlite sequence are name, seq. columns in country are code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2. columns in countrylanguage are countrycode, language, is official, percentage.",
    "target": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3"
  },
  {
    "prompt": "Return the names of the 3 most populated countries. database is world_1. tables are city, sqlite sequence, country, countrylanguage. columns in city are id, name, country code, district, population. columns in sqlite sequence are name, seq. columns in country are code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2. columns in countrylanguage are countrycode, language, is official, percentage.",
    "target": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3"
  },
  {
    "prompt": "What are the names of the nations with the 3 lowest populations? database is world_1. tables are city, sqlite sequence, country, countrylanguage. columns in city are id, name, country code, district, population. columns in sqlite sequence are name, seq. columns in country are code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2. columns in countrylanguage are countrycode, language, is official, percentage.",
    "target": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3"
  },
  {
    "prompt": "Return the names of the 3 countries with the fewest people. database is world_1. tables are city, sqlite sequence, country, countrylanguage. columns in city are id, name, country code, district, population. columns in sqlite sequence are name, seq. columns in country are code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2. columns in countrylanguage are countrycode, language, is official, percentage.",
    "target": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3"
  },
  {
    "prompt": "how many countries are in Asia? database is world_1. tables are city, sqlite sequence, country, countrylanguage. columns in city are id, name, country code, district, population. columns in sqlite sequence are name, seq. columns in country are code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2. columns in countrylanguage are countrycode, language, is official, percentage.",
    "target": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""
  },
  {
    "prompt": "Count the number of countries in Asia. database is world_1. tables are city, sqlite sequence, country, countrylanguage. columns in city are id, name, country code, district, population. columns in sqlite sequence are name, seq. columns in country are code, name, continent, region, surface area, indepdent year, population, life expectancy, gnp, gnp old, local name, government form, head of state, capital, code2. columns in countrylanguage are countrycode, language, is official, percentage.",
    "target": "SELECT count(*) FROM country WHERE continent  =  \"Asia\""
  },
  {
    "prompt": "How many conductors are there? database is orchestra. tables are conductor, orchestra, performance, show. columns in conductor are conductor id, name, age, nationality, year of work. columns in orchestra are orchestra id, orchestra, conductor id, record company, year of founded, major record format. columns in performance are performance id, orchestra id, type, date, official ratings millions, weekly rank, share. columns in show are show id, performance id, if first show, result, attendance.",
    "target": "SELECT count(*) FROM conductor"
  },
  {
    "prompt": "Count the number of conductors. database is orchestra. tables are conductor, orchestra, performance, show. columns in conductor are conductor id, name, age, nationality, year of work. columns in orchestra are orchestra id, orchestra, conductor id, record company, year of founded, major record format. columns in performance are performance id, orchestra id, type, date, official ratings millions, weekly rank, share. columns in show are show id, performance id, if first show, result, attendance.",
    "target": "SELECT count(*) FROM conductor"
  },
  {
    "prompt": "What are the record companies of orchestras in descending order of years in which they were founded? database is orchestra. tables are conductor, orchestra, performance, show. columns in conductor are conductor id, name, age, nationality, year of work. columns in orchestra are orchestra id, orchestra, conductor id, record company, year of founded, major record format. columns in performance are performance id, orchestra id, type, date, official ratings millions, weekly rank, share. columns in show are show id, performance id, if first show, result, attendance.",
    "target": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC"
  },
  {
    "prompt": "Return the record companies of orchestras, sorted descending by the years in which they were founded. database is orchestra. tables are conductor, orchestra, performance, show. columns in conductor are conductor id, name, age, nationality, year of work. columns in orchestra are orchestra id, orchestra, conductor id, record company, year of founded, major record format. columns in performance are performance id, orchestra id, type, date, official ratings millions, weekly rank, share. columns in show are show id, performance id, if first show, result, attendance.",
    "target": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC"
  },
  {
    "prompt": "What is the average attendance of shows? database is orchestra. tables are conductor, orchestra, performance, show. columns in conductor are conductor id, name, age, nationality, year of work. columns in orchestra are orchestra id, orchestra, conductor id, record company, year of founded, major record format. columns in performance are performance id, orchestra id, type, date, official ratings millions, weekly rank, share. columns in show are show id, performance id, if first show, result, attendance.",
    "target": "SELECT avg(Attendance) FROM SHOW"
  },
  {
    "prompt": "Return the average attendance across all shows. database is orchestra. tables are conductor, orchestra, performance, show. columns in conductor are conductor id, name, age, nationality, year of work. columns in orchestra are orchestra id, orchestra, conductor id, record company, year of founded, major record format. columns in performance are performance id, orchestra id, type, date, official ratings millions, weekly rank, share. columns in show are show id, performance id, if first show, result, attendance.",
    "target": "SELECT avg(Attendance) FROM SHOW"
  },
  {
    "prompt": "How many different nationalities do conductors have? database is orchestra. tables are conductor, orchestra, performance, show. columns in conductor are conductor id, name, age, nationality, year of work. columns in orchestra are orchestra id, orchestra, conductor id, record company, year of founded, major record format. columns in performance are performance id, orchestra id, type, date, official ratings millions, weekly rank, share. columns in show are show id, performance id, if first show, result, attendance.",
    "target": "SELECT count(DISTINCT Nationality) FROM conductor"
  },
  {
    "prompt": "Count the number of different nationalities of conductors. database is orchestra. tables are conductor, orchestra, performance, show. columns in conductor are conductor id, name, age, nationality, year of work. columns in orchestra are orchestra id, orchestra, conductor id, record company, year of founded, major record format. columns in performance are performance id, orchestra id, type, date, official ratings millions, weekly rank, share. columns in show are show id, performance id, if first show, result, attendance.",
    "target": "SELECT count(DISTINCT Nationality) FROM conductor"
  },
  {
    "prompt": "How many high schoolers are there? database is network_1. tables are high schooler, friend, likes. columns in high schooler are id, name, grade. columns in friend are student id, friend id. columns in likes are student id, liked id.",
    "target": "SELECT count(*) FROM Highschooler"
  },
  {
    "prompt": "Count the number of high schoolers. database is network_1. tables are high schooler, friend, likes. columns in high schooler are id, name, grade. columns in friend are student id, friend id. columns in likes are student id, liked id.",
    "target": "SELECT count(*) FROM Highschooler"
  },
  {
    "prompt": "Show all the grades of the high schoolers. database is network_1. tables are high schooler, friend, likes. columns in high schooler are id, name, grade. columns in friend are student id, friend id. columns in likes are student id, liked id.",
    "target": "SELECT grade FROM Highschooler"
  },
  {
    "prompt": "What is the grade of each high schooler? database is network_1. tables are high schooler, friend, likes. columns in high schooler are id, name, grade. columns in friend are student id, friend id. columns in likes are student id, liked id.",
    "target": "SELECT grade FROM Highschooler"
  },
  {
    "prompt": "What grade is Kyle in? database is network_1. tables are high schooler, friend, likes. columns in high schooler are id, name, grade. columns in friend are student id, friend id. columns in likes are student id, liked id.",
    "target": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\""
  },
  {
    "prompt": "Return the grade for the high schooler named Kyle. database is network_1. tables are high schooler, friend, likes. columns in high schooler are id, name, grade. columns in friend are student id, friend id. columns in likes are student id, liked id.",
    "target": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\""
  },
  {
    "prompt": "Show the names of all high schoolers in grade 10. database is network_1. tables are high schooler, friend, likes. columns in high schooler are id, name, grade. columns in friend are student id, friend id. columns in likes are student id, liked id.",
    "target": "SELECT name FROM Highschooler WHERE grade  =  10"
  },
  {
    "prompt": "What are the names of all high schoolers in grade 10? database is network_1. tables are high schooler, friend, likes. columns in high schooler are id, name, grade. columns in friend are student id, friend id. columns in likes are student id, liked id.",
    "target": "SELECT name FROM Highschooler WHERE grade  =  10"
  },
  {
    "prompt": "Show the ID of the high schooler named Kyle. database is network_1. tables are high schooler, friend, likes. columns in high schooler are id, name, grade. columns in friend are student id, friend id. columns in likes are student id, liked id.",
    "target": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\""
  },
  {
    "prompt": "What is Kyles id? database is network_1. tables are high schooler, friend, likes. columns in high schooler are id, name, grade. columns in friend are student id, friend id. columns in likes are student id, liked id.",
    "target": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\""
  },
  {
    "prompt": "Show me all grades that have at least 4 students. database is network_1. tables are high schooler, friend, likes. columns in high schooler are id, name, grade. columns in friend are student id, friend id. columns in likes are student id, liked id.",
    "target": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4"
  },
  {
    "prompt": "Which grades have 4 or more high schoolers? database is network_1. tables are high schooler, friend, likes. columns in high schooler are id, name, grade. columns in friend are student id, friend id. columns in likes are student id, liked id.",
    "target": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4"
  },
  {
    "prompt": "Show ids of all students who do not have any friends. database is network_1. tables are high schooler, friend, likes. columns in high schooler are id, name, grade. columns in friend are student id, friend id. columns in likes are student id, liked id.",
    "target": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend"
  },
  {
    "prompt": "What are the ids of high school students who do not have friends? database is network_1. tables are high schooler, friend, likes. columns in high schooler are id, name, grade. columns in friend are student id, friend id. columns in likes are student id, liked id.",
    "target": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend"
  },
  {
    "prompt": "How many dogs went through any treatments? database is dog_kennels. tables are breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments. columns in breeds are breed code, breed name. columns in charges are charge id, charge type, charge amount. columns in sizes are size code, size description. columns in treatment types are treatment type code, treatment type description. columns in owners are owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number. columns in dogs are dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed. columns in professionals are professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number. columns in treatments are treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment.",
    "target": "SELECT count(DISTINCT dog_id) FROM Treatments"
  },
  {
    "prompt": "Count the number of dogs that went through a treatment. database is dog_kennels. tables are breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments. columns in breeds are breed code, breed name. columns in charges are charge id, charge type, charge amount. columns in sizes are size code, size description. columns in treatment types are treatment type code, treatment type description. columns in owners are owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number. columns in dogs are dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed. columns in professionals are professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number. columns in treatments are treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment.",
    "target": "SELECT count(DISTINCT dog_id) FROM Treatments"
  },
  {
    "prompt": "How many professionals have performed any treatment to dogs? database is dog_kennels. tables are breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments. columns in breeds are breed code, breed name. columns in charges are charge id, charge type, charge amount. columns in sizes are size code, size description. columns in treatment types are treatment type code, treatment type description. columns in owners are owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number. columns in dogs are dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed. columns in professionals are professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number. columns in treatments are treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment.",
    "target": "SELECT count(DISTINCT professional_id) FROM Treatments"
  },
  {
    "prompt": "Find the number of professionals who have ever treated dogs. database is dog_kennels. tables are breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments. columns in breeds are breed code, breed name. columns in charges are charge id, charge type, charge amount. columns in sizes are size code, size description. columns in treatment types are treatment type code, treatment type description. columns in owners are owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number. columns in dogs are dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed. columns in professionals are professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number. columns in treatments are treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment.",
    "target": "SELECT count(DISTINCT professional_id) FROM Treatments"
  },
  {
    "prompt": "How much does the most recent treatment cost? database is dog_kennels. tables are breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments. columns in breeds are breed code, breed name. columns in charges are charge id, charge type, charge amount. columns in sizes are size code, size description. columns in treatment types are treatment type code, treatment type description. columns in owners are owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number. columns in dogs are dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed. columns in professionals are professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number. columns in treatments are treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment.",
    "target": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"
  },
  {
    "prompt": "Show me the cost of the most recently performed treatment. database is dog_kennels. tables are breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments. columns in breeds are breed code, breed name. columns in charges are charge id, charge type, charge amount. columns in sizes are size code, size description. columns in treatment types are treatment type code, treatment type description. columns in owners are owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number. columns in dogs are dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed. columns in professionals are professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number. columns in treatments are treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment.",
    "target": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"
  },
  {
    "prompt": "What is the average age of all the dogs? database is dog_kennels. tables are breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments. columns in breeds are breed code, breed name. columns in charges are charge id, charge type, charge amount. columns in sizes are size code, size description. columns in treatment types are treatment type code, treatment type description. columns in owners are owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number. columns in dogs are dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed. columns in professionals are professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number. columns in treatments are treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment.",
    "target": "SELECT avg(age) FROM Dogs"
  },
  {
    "prompt": "Compute the average age of all the dogs. database is dog_kennels. tables are breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments. columns in breeds are breed code, breed name. columns in charges are charge id, charge type, charge amount. columns in sizes are size code, size description. columns in treatment types are treatment type code, treatment type description. columns in owners are owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number. columns in dogs are dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed. columns in professionals are professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number. columns in treatments are treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment.",
    "target": "SELECT avg(age) FROM Dogs"
  },
  {
    "prompt": "What is the age of the oldest dog? database is dog_kennels. tables are breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments. columns in breeds are breed code, breed name. columns in charges are charge id, charge type, charge amount. columns in sizes are size code, size description. columns in treatment types are treatment type code, treatment type description. columns in owners are owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number. columns in dogs are dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed. columns in professionals are professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number. columns in treatments are treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment.",
    "target": "SELECT max(age) FROM Dogs"
  },
  {
    "prompt": "Tell me the age of the oldest dog. database is dog_kennels. tables are breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments. columns in breeds are breed code, breed name. columns in charges are charge id, charge type, charge amount. columns in sizes are size code, size description. columns in treatment types are treatment type code, treatment type description. columns in owners are owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number. columns in dogs are dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed. columns in professionals are professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number. columns in treatments are treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment.",
    "target": "SELECT max(age) FROM Dogs"
  },
  {
    "prompt": "How much does the most expensive charge type costs? database is dog_kennels. tables are breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments. columns in breeds are breed code, breed name. columns in charges are charge id, charge type, charge amount. columns in sizes are size code, size description. columns in treatment types are treatment type code, treatment type description. columns in owners are owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number. columns in dogs are dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed. columns in professionals are professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number. columns in treatments are treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment.",
    "target": "SELECT max(charge_amount) FROM Charges"
  },
  {
    "prompt": "What is the charge amount of the most expensive charge type? database is dog_kennels. tables are breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments. columns in breeds are breed code, breed name. columns in charges are charge id, charge type, charge amount. columns in sizes are size code, size description. columns in treatment types are treatment type code, treatment type description. columns in owners are owner id, first name, last name, street, city, state, zip code, email address, home phone, cell number. columns in dogs are dog id, owner id, abandoned yes or no, breed code, size code, name, age, date of birth, gender, weight, date arrived, date adopted, date departed. columns in professionals are professional id, role code, first name, street, city, state, zip code, last name, email address, home phone, cell number. columns in treatments are treatment id, dog id, professional id, treatment type code, date of treatment, cost of treatment.",
    "target": "SELECT max(charge_amount) FROM Charges"
  },
  {
    "prompt": "How many singers are there? database is singer. tables are singer, song. columns in singer are singer id, name, birth year, net worth millions, citizenship. columns in song are song id, title, singer id, sales, highest position.",
    "target": "SELECT count(*) FROM singer"
  },
  {
    "prompt": "What is the count of singers? database is singer. tables are singer, song. columns in singer are singer id, name, birth year, net worth millions, citizenship. columns in song are song id, title, singer id, sales, highest position.",
    "target": "SELECT count(*) FROM singer"
  },
  {
    "prompt": "List the name of singers in ascending order of net worth. database is singer. tables are singer, song. columns in singer are singer id, name, birth year, net worth millions, citizenship. columns in song are song id, title, singer id, sales, highest position.",
    "target": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC"
  },
  {
    "prompt": "What are the names of singers ordered by ascending net worth? database is singer. tables are singer, song. columns in singer are singer id, name, birth year, net worth millions, citizenship. columns in song are song id, title, singer id, sales, highest position.",
    "target": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC"
  },
  {
    "prompt": "List the name of singers whose citizenship is not \"France\". database is singer. tables are singer, song. columns in singer are singer id, name, birth year, net worth millions, citizenship. columns in song are song id, title, singer id, sales, highest position.",
    "target": "SELECT Name FROM singer WHERE Citizenship != \"France\""
  },
  {
    "prompt": "What are the names of the singers who are not French citizens? database is singer. tables are singer, song. columns in singer are singer id, name, birth year, net worth millions, citizenship. columns in song are song id, title, singer id, sales, highest position.",
    "target": "SELECT Name FROM singer WHERE Citizenship != \"France\""
  },
  {
    "prompt": "What is the name of the singer with the largest net worth? database is singer. tables are singer, song. columns in singer are singer id, name, birth year, net worth millions, citizenship. columns in song are song id, title, singer id, sales, highest position.",
    "target": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"
  },
  {
    "prompt": "What is the name of the singer who is worth the most? database is singer. tables are singer, song. columns in singer are singer id, name, birth year, net worth millions, citizenship. columns in song are song id, title, singer id, sales, highest position.",
    "target": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"
  },
  {
    "prompt": "How many available features are there in total? database is real_estate_properties. tables are reference feature types, reference property types, other available features, properties, other property features. columns in reference feature types are feature type code, feature type name. columns in reference property types are property type code, property type description. columns in other available features are feature id, feature type code, feature name, feature description. columns in properties are property id, property type code, date on market, date sold, property name, property address, room count, vendor requested price, buyer offered price, agreed selling price, apt feature 1, apt feature 2, apt feature 3, fld feature 1, fld feature 2, fld feature 3, hse feature 1, hse feature 2, hse feature 3, oth feature 1, oth feature 2, oth feature 3, shp feature 1, shp feature 2, shp feature 3, other property details. columns in other property features are property id, feature id, property feature description.",
    "target": "SELECT count(*) FROM Other_Available_Features"
  }
]